#Remaking the script that makes movies in steamshovel. 

"""
This script will need to be passed through steamshovel to make directores
and folders.
Executed in uniformenergydist_filter.py
"""
#Imports
import os
import argparse
import subprocess
import sys
from icecube import icetray, dataclasses
import numpy as np
import pandas as pd

from icecube.shovelart import ActivePixmapOverlay, Arrow, ArtistHandle, ArtistHandleList, ArtistKeylist, BaseLineObject, ChoiceSetting, ColorMap, ColoredObject, ConstantColorMap, ConstantFloat, ConstantQColor, ConstantTime, ConstantVec3d, Cylinder, DynamicLines, FileSetting, I3TimeColorMap, KeySetting, LinterpFunctionFloat, LinterpFunctionQColor, LinterpFunctionVec3d, OMKeySet, OverlayLine, OverlaySizeHint, OverlaySizeHints, ParticlePath, ParticlePoint, Phantom, PixmapOverlay, PyArtist, PyQColor, PyQFont, PyVariantFloat, PyVariantQColor, PyVariantTime, PyVariantVec3d, RangeSetting, Scenario, SceneGroup, SceneObject, SceneOverlay, SolidObject, Sphere, StaticLines, StepFunctionFloat, StepFunctionQColor, StepFunctionTime, StepFunctionVec3d, Text, TextOverlay, TimePoint, TimeWindow, TimeWindowColor, VariantFloat, VariantQColor, VariantTime, VariantVec3d, VariantVec3dList, Vec3dList, ZPlane, vec3d
from icecube.icetray import OMKey
from icecube.icetray import logging


#BROKEN path to handbrake -- Not working, need to compress within handbrake GUI
handbrakepath = '/home/icecube/Desktop/eliz_zooniverse/icecubezooniverseproj_ver3/launch/HandBrakeCLI'
compression_preset = '/home/icecube/Desktop/eliz_zooniverse/icecubezooniverseproj_ver3/launch/Beta2_Compression.json'


"""
Set up folder system that will hold the movies.
"""
i3_name = os.path.basename(app.files.openFiles[1])
direc = os.path.dirname(app.files.openFiles[1])

#Makes folders for videos and stills of currently open i3 file.
#Stills will save over the prior video's stills. 

fileindex = 0 #start folder naming convention at 0.
print("Making Directories...")

file_path = f"{direc}/"

while os.path.isdir(file_path+'Stills{:04}'.format(fileindex)):
    fileindex+=1

outdir_stills=file_path+'Stills{:04}/'.format(fileindex)
os.mkdir(outdir_stills)

while os.path.isdir(file_path+'Film{:04}'.format(fileindex)):
    fileindex+=1

outdir=file_path+'Film{:04}/'.format(fileindex)
os.mkdir(outdir)

#while os.path.isdir(file_path+'File{:04}_compressed'.format(fileindex)):
    #fileindex+=1

#outdir_compressed = file_path+'Film{:04}_compressed'.format(fileindex)
#os.mkdir(outdir_compressed)

print('Check if Directories are made...')
#check that directories make sense. 

"""
Set up SteamShovel Scenarios/Artists. 
"""

#Coordinate System
scenario = window.gl.scenario
scenario.clear()
artist = scenario.add( 'CoordinateSystem', [] ) #select steamshovel artist
scenario.setIsActive( artist, False ) #set to false prior to set up (this was generated by steamshovel)
scenario.changeSetting( artist, 'position', '0m, 0m, 0m' ) #axes location
scenario.changeSetting( artist, 'x length', '1 km' ) 
scenario.changeSetting( artist, 'y length', '1 km' )
scenario.changeSetting( artist, 'z length', '1 km' )
scenario.changeSetting( artist, 'line width', 8 ) 
scenario.changeSetting( artist, 'head angle', 20 )
scenario.changeSetting( artist, 'head length', 30 )
scenario.changeSetting( artist, 'opacity', 0.5 )
scenario.setIsActive( artist, True )

#Ice, Bedrock, Dust
artist = scenario.add( 'Ice', [] )
scenario.setIsActive( artist, False )
scenario.changeSetting( artist, 'Show ice', True )
scenario.changeSetting( artist, 'Show bedrock', True )
scenario.changeSetting( artist, 'Show dust', False )
scenario.changeSetting( artist, '3D dust', False )
scenario.changeSetting( artist, 'Color ice', PyQColor(25,25,255,255) )
scenario.changeSetting( artist, 'Color bedrock', PyQColor(46,52,54,255) )
scenario.changeSetting( artist, 'Color dust', PyQColor(211,215,207,255) )
scenario.changeSetting( artist, 'Plane width', '2200 m' )
scenario.changeSetting( artist, 'Line width', 1 )
scenario.changeSetting( artist, 'Dust density', 1.5 )
scenario.changeSetting( artist, 'Dust scatter', 0.2 )
scenario.setIsActive( artist, True )

#Detector, Strings, DOMs
artist = scenario.add( 'Detector', ['I3Geometry', ] )
scenario.setIsActive( artist, False )
scenario.changeSetting( artist, 'DOM labels', False )
scenario.changeSetting( artist, 'DOM radius', 1 )
scenario.changeSetting( artist, 'DOM color', PyQColor(46,52,54,255) )
scenario.changeSetting( artist, 'string color', PyQColor(46,52,54,255) )
scenario.changeSetting( artist, 'string width', 1 )
scenario.changeSetting( artist, 'string cross', False )
scenario.changeSetting( artist, 'outline width', 3 )
scenario.changeSetting( artist, 'high quality DOMs', True )
scenario.changeSetting( artist, 'hide', 0 )
scenario.setIsActive( artist, True )


#Bubbles
artist = scenario.add( 'Bubbles', ['I3Geometry', 'InIceDSTPulses', ] )
scenario.setIsActive( artist, False )
scenario.changeSetting( artist, 'colormap', I3TimeColorMap() )
scenario.changeSetting( artist, 'scale', 10 ) 
scenario.changeSetting( artist, 'power', 0.05 ) 
scenario.changeSetting( artist, 'static', PyQColor(255,0,255,255) )
scenario.changeSetting( artist, 'log10(delay/ns)', 6 ) #Effects color gradient
scenario.changeSetting( artist, 'custom color window', '' )
scenario.setIsActive( artist, True )

artist = scenario.add( 'TextSummary', ['I3EventHeader', ] )
scenario.setIsActive( artist, False )
scenario.changeSetting( artist, 'short', True )
scenario.changeSetting( artist, 'font', PyQFont.fromString('Ubuntu,11,-1,5,50,0,0,0,0,0') )
scenario.changeSetting( artist, 'fontsize', 11 )
scenario.setOverlaySizeHints( artist, [OverlaySizeHint(10,10,201,55), ] )
scenario.setIsActive( artist, False ) #Turn off text summary

#Camera, Background, Camera
window.gl.setCameraPivot(0.0, 0.0, 0.0)
window.gl.setCameraLoc(1197.9000244140625, 1197.9000244140625, 1197.9000244140625)
window.gl.setCameraOrientation(-0.7071067690849304, 0.7071067690849304, 0.0)
window.gl.cameraLock = False
window.gl.perspectiveView = True
window.gl.backgroundColor = PyQColor(0,0,0,255)
window.timeline.rangeFinder = "Default"
window.frame_filter.code = ""
window.activeView = 0

"""
Prep I3File
"""

app.files.selectFrame(0) #start by selecting 0th frame every new i3 file.

app.files.nextMatchingFrame(icetray.I3Frame.DAQ) #Goes to first Q frame of i3 file.

starting_index = int(app.files.currentIndex) #saves the index of the first q frame in i3 file.
ending_index = int(app.files.nFrames) - starting_index


endframe = app.files.nFrames

#can make a csv for each video process to help match what videos get made and what don't. 
#unsure if this works
subj_path = []
run_col = []
event_col = []
orig_idx_col = []


"""
MAKING THE VIDEOS
Loop through frames to make videos. 
"""
for i in range(starting_index, endframe):
    #Get basic data of frame.
    event_id = str(frame['I3EventHeader'].event_id)
    run_id = str(frame['I3EventHeader'].run_id)
    frame_index = str(app.files.currentIndex)

    #Adjust colorbar according to time of event, code from Mike C.

    pm = dataclasses.I3RecoPulseSeriesMap.from_frame(frame, 'InIceDSTPulses') #Get pulse map
    keys = pm.keys() #Get OMKeys
    times = sorted([pulse.time for key in keys for pulse in pm[key]]) #Get pulse times.
    #Set start and end times.
    start_time = np.median(times) - np.std(times)
    end_time = np.median(times) + np.std(times)
    #Changes colorbar for each event.
    window.timeline.minTime = start_time
    window.timeline.maxTime = end_time

    #Begin video-making process.
    #print("Now Processing Frame ID: ",event_id,"in run:",run_id, "of Index: ",frame_index)
    #Movie parameters:
    window.movieEngine.height = 480 #height in pixel size
    window.movieEngine.width = 640 #width in pixel size
    window.movieEngine.scaleFactor = 4 #scales up resolution of movie.
    window.movieEngine.rescaleFlag = True #rescales back down to original size, for higher quality.
    window.movieEngine.fps = 10 #frames per second, calculated to rotate detector 90 degrees during movie.
    window.movieEngine.nframes = 170 #total number of frames, calculated to rotate detector 90 degrees during movie.
    window.movieEngine.rotation = 5.3 #in degrees per second, also calcuated to rotate detector/camera 90 degrees.
    window.movieEngine.starttime = 0 #start time in ns.
    window.movieEngine.endtime = 40000 #end time in ns, goes to the end of the event frame.

    #Actually produces movie:
    window.movieEngine.produceStills(outdir_stills) #in order to make the movie, need to also produce stills of each event frame.

    window.movieEngine.produceMovie(f"{outdir}run_{run_id}_event_{event_id}_origidx_{frame_index}.mp4") #produce movie from stills and save
     
    print("Completed Film Frame ID: ",event_id,"in run:",run_id)

    #compression
    vid_name = f"{outdir}run_{run_id}_event_{event_id}_origidx_{frame_index}.mp4"
    compressed_vid = f"compressed_run_{run_id}_event_{event_id}_origidx_{frame_index}_RF22.mp4"
    subj_path.append(compressed_vid)
    run_col.append(run_id)
    event_col.append(event_id)
    orig_idx_col.append(frame_index)
    compress_path = f'/home/icecube/Desktop/eliz_zooniverse/icecubezooniverseproj_ver3/launch/compressed_{run_id}/'
    
    #Handbrake subprocess (below) is broken, will need to compress using Handbrake GUI directly with specified compression preset. 
    #subprocess.call(f"{handbrakepath} -i {vid_name} -o {compress_path}{compressed_vid} --preset-import-file {compression_preset}")
    #print(f"Compressed video for event {event_id} in run {run_id}.")

    app.files.nextMatchingFrame(icetray.I3Frame.DAQ) #Go to next Q frame and begin loop over again making the next video.
	#Note: there has been issues with steamshovel quitting in the middle of a run. Unsure why, maybe something to do with Cache breaking
	#Idea: maybe switch to using a pipeline to feed in event frames
df = pd.DataFrame(list(zip(subj_path, run_col,event_col,orig_idx_col)),
               columns =['compressed_name', 'run','event','orig_idx']) 

df.to_csv(outdir+'Film{:04}.csv'.format(fileindex)) #make a csv to check which videos got made, can be used to cross check for making manifest later. 
#print("Total Number of Videos Expected:", ending_index)

window.close() #Closes steamshovel when all frames have been turned into movies.
